/*
Celenium API

This is docs of Celenium API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesBlob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesBlob{}

// ResponsesBlob struct for ResponsesBlob
type ResponsesBlob struct {
	Commitment *string `json:"commitment,omitempty"`
	ContentType *string `json:"content_type,omitempty"`
	Data *string `json:"data,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	ShareVersion *int32 `json:"share_version,omitempty"`
}

// NewResponsesBlob instantiates a new ResponsesBlob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesBlob() *ResponsesBlob {
	this := ResponsesBlob{}
	return &this
}

// NewResponsesBlobWithDefaults instantiates a new ResponsesBlob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesBlobWithDefaults() *ResponsesBlob {
	this := ResponsesBlob{}
	return &this
}

// GetCommitment returns the Commitment field value if set, zero value otherwise.
func (o *ResponsesBlob) GetCommitment() string {
	if o == nil || IsNil(o.Commitment) {
		var ret string
		return ret
	}
	return *o.Commitment
}

// GetCommitmentOk returns a tuple with the Commitment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlob) GetCommitmentOk() (*string, bool) {
	if o == nil || IsNil(o.Commitment) {
		return nil, false
	}
	return o.Commitment, true
}

// HasCommitment returns a boolean if a field has been set.
func (o *ResponsesBlob) HasCommitment() bool {
	if o != nil && !IsNil(o.Commitment) {
		return true
	}

	return false
}

// SetCommitment gets a reference to the given string and assigns it to the Commitment field.
func (o *ResponsesBlob) SetCommitment(v string) {
	o.Commitment = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ResponsesBlob) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlob) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ResponsesBlob) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ResponsesBlob) SetContentType(v string) {
	o.ContentType = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ResponsesBlob) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlob) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ResponsesBlob) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ResponsesBlob) SetData(v string) {
	o.Data = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ResponsesBlob) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlob) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ResponsesBlob) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ResponsesBlob) SetNamespace(v string) {
	o.Namespace = &v
}

// GetShareVersion returns the ShareVersion field value if set, zero value otherwise.
func (o *ResponsesBlob) GetShareVersion() int32 {
	if o == nil || IsNil(o.ShareVersion) {
		var ret int32
		return ret
	}
	return *o.ShareVersion
}

// GetShareVersionOk returns a tuple with the ShareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlob) GetShareVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.ShareVersion) {
		return nil, false
	}
	return o.ShareVersion, true
}

// HasShareVersion returns a boolean if a field has been set.
func (o *ResponsesBlob) HasShareVersion() bool {
	if o != nil && !IsNil(o.ShareVersion) {
		return true
	}

	return false
}

// SetShareVersion gets a reference to the given int32 and assigns it to the ShareVersion field.
func (o *ResponsesBlob) SetShareVersion(v int32) {
	o.ShareVersion = &v
}

func (o ResponsesBlob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesBlob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commitment) {
		toSerialize["commitment"] = o.Commitment
	}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.ShareVersion) {
		toSerialize["share_version"] = o.ShareVersion
	}
	return toSerialize, nil
}

type NullableResponsesBlob struct {
	value *ResponsesBlob
	isSet bool
}

func (v NullableResponsesBlob) Get() *ResponsesBlob {
	return v.value
}

func (v *NullableResponsesBlob) Set(val *ResponsesBlob) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesBlob) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesBlob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesBlob(val *ResponsesBlob) *NullableResponsesBlob {
	return &NullableResponsesBlob{value: val, isSet: true}
}

func (v NullableResponsesBlob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesBlob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


