/*
Celenium API

Celenium TEST API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesBalance{}

// ResponsesBalance Balance of address information
type ResponsesBalance struct {
	Currency *string `json:"currency,omitempty"`
	Delegated *string `json:"delegated,omitempty"`
	Spendable *string `json:"spendable,omitempty"`
	Unbonding *string `json:"unbonding,omitempty"`
}

// NewResponsesBalance instantiates a new ResponsesBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesBalance() *ResponsesBalance {
	this := ResponsesBalance{}
	return &this
}

// NewResponsesBalanceWithDefaults instantiates a new ResponsesBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesBalanceWithDefaults() *ResponsesBalance {
	this := ResponsesBalance{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ResponsesBalance) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBalance) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ResponsesBalance) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ResponsesBalance) SetCurrency(v string) {
	o.Currency = &v
}

// GetDelegated returns the Delegated field value if set, zero value otherwise.
func (o *ResponsesBalance) GetDelegated() string {
	if o == nil || IsNil(o.Delegated) {
		var ret string
		return ret
	}
	return *o.Delegated
}

// GetDelegatedOk returns a tuple with the Delegated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBalance) GetDelegatedOk() (*string, bool) {
	if o == nil || IsNil(o.Delegated) {
		return nil, false
	}
	return o.Delegated, true
}

// HasDelegated returns a boolean if a field has been set.
func (o *ResponsesBalance) HasDelegated() bool {
	if o != nil && !IsNil(o.Delegated) {
		return true
	}

	return false
}

// SetDelegated gets a reference to the given string and assigns it to the Delegated field.
func (o *ResponsesBalance) SetDelegated(v string) {
	o.Delegated = &v
}

// GetSpendable returns the Spendable field value if set, zero value otherwise.
func (o *ResponsesBalance) GetSpendable() string {
	if o == nil || IsNil(o.Spendable) {
		var ret string
		return ret
	}
	return *o.Spendable
}

// GetSpendableOk returns a tuple with the Spendable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBalance) GetSpendableOk() (*string, bool) {
	if o == nil || IsNil(o.Spendable) {
		return nil, false
	}
	return o.Spendable, true
}

// HasSpendable returns a boolean if a field has been set.
func (o *ResponsesBalance) HasSpendable() bool {
	if o != nil && !IsNil(o.Spendable) {
		return true
	}

	return false
}

// SetSpendable gets a reference to the given string and assigns it to the Spendable field.
func (o *ResponsesBalance) SetSpendable(v string) {
	o.Spendable = &v
}

// GetUnbonding returns the Unbonding field value if set, zero value otherwise.
func (o *ResponsesBalance) GetUnbonding() string {
	if o == nil || IsNil(o.Unbonding) {
		var ret string
		return ret
	}
	return *o.Unbonding
}

// GetUnbondingOk returns a tuple with the Unbonding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBalance) GetUnbondingOk() (*string, bool) {
	if o == nil || IsNil(o.Unbonding) {
		return nil, false
	}
	return o.Unbonding, true
}

// HasUnbonding returns a boolean if a field has been set.
func (o *ResponsesBalance) HasUnbonding() bool {
	if o != nil && !IsNil(o.Unbonding) {
		return true
	}

	return false
}

// SetUnbonding gets a reference to the given string and assigns it to the Unbonding field.
func (o *ResponsesBalance) SetUnbonding(v string) {
	o.Unbonding = &v
}

func (o ResponsesBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Delegated) {
		toSerialize["delegated"] = o.Delegated
	}
	if !IsNil(o.Spendable) {
		toSerialize["spendable"] = o.Spendable
	}
	if !IsNil(o.Unbonding) {
		toSerialize["unbonding"] = o.Unbonding
	}
	return toSerialize, nil
}

type NullableResponsesBalance struct {
	value *ResponsesBalance
	isSet bool
}

func (v NullableResponsesBalance) Get() *ResponsesBalance {
	return v.value
}

func (v *NullableResponsesBalance) Set(val *ResponsesBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesBalance(val *ResponsesBalance) *NullableResponsesBalance {
	return &NullableResponsesBalance{value: val, isSet: true}
}

func (v NullableResponsesBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


