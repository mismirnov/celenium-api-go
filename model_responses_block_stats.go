/*
Celenium API

Celenium TEST API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesBlockStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesBlockStats{}

// ResponsesBlockStats struct for ResponsesBlockStats
type ResponsesBlockStats struct {
	BlobsCount *int32 `json:"blobs_count,omitempty"`
	BlobsSize *int32 `json:"blobs_size,omitempty"`
	BlockTime *int32 `json:"block_time,omitempty"`
	BytesInBlock *int32 `json:"bytes_in_block,omitempty"`
	Commissions *string `json:"commissions,omitempty"`
	EventsCount *int32 `json:"events_count,omitempty"`
	Fee *string `json:"fee,omitempty"`
	FillRate *string `json:"fill_rate,omitempty"`
	GasLimit *int32 `json:"gas_limit,omitempty"`
	GasUsed *int32 `json:"gas_used,omitempty"`
	InflationRate *string `json:"inflation_rate,omitempty"`
	Rewards *string `json:"rewards,omitempty"`
	SquareSize *int32 `json:"square_size,omitempty"`
	SupplyChange *string `json:"supply_change,omitempty"`
	TxCount *int32 `json:"tx_count,omitempty"`
}

// NewResponsesBlockStats instantiates a new ResponsesBlockStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesBlockStats() *ResponsesBlockStats {
	this := ResponsesBlockStats{}
	return &this
}

// NewResponsesBlockStatsWithDefaults instantiates a new ResponsesBlockStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesBlockStatsWithDefaults() *ResponsesBlockStats {
	this := ResponsesBlockStats{}
	return &this
}

// GetBlobsCount returns the BlobsCount field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetBlobsCount() int32 {
	if o == nil || IsNil(o.BlobsCount) {
		var ret int32
		return ret
	}
	return *o.BlobsCount
}

// GetBlobsCountOk returns a tuple with the BlobsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetBlobsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BlobsCount) {
		return nil, false
	}
	return o.BlobsCount, true
}

// HasBlobsCount returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasBlobsCount() bool {
	if o != nil && !IsNil(o.BlobsCount) {
		return true
	}

	return false
}

// SetBlobsCount gets a reference to the given int32 and assigns it to the BlobsCount field.
func (o *ResponsesBlockStats) SetBlobsCount(v int32) {
	o.BlobsCount = &v
}

// GetBlobsSize returns the BlobsSize field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetBlobsSize() int32 {
	if o == nil || IsNil(o.BlobsSize) {
		var ret int32
		return ret
	}
	return *o.BlobsSize
}

// GetBlobsSizeOk returns a tuple with the BlobsSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetBlobsSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BlobsSize) {
		return nil, false
	}
	return o.BlobsSize, true
}

// HasBlobsSize returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasBlobsSize() bool {
	if o != nil && !IsNil(o.BlobsSize) {
		return true
	}

	return false
}

// SetBlobsSize gets a reference to the given int32 and assigns it to the BlobsSize field.
func (o *ResponsesBlockStats) SetBlobsSize(v int32) {
	o.BlobsSize = &v
}

// GetBlockTime returns the BlockTime field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetBlockTime() int32 {
	if o == nil || IsNil(o.BlockTime) {
		var ret int32
		return ret
	}
	return *o.BlockTime
}

// GetBlockTimeOk returns a tuple with the BlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetBlockTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockTime) {
		return nil, false
	}
	return o.BlockTime, true
}

// HasBlockTime returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasBlockTime() bool {
	if o != nil && !IsNil(o.BlockTime) {
		return true
	}

	return false
}

// SetBlockTime gets a reference to the given int32 and assigns it to the BlockTime field.
func (o *ResponsesBlockStats) SetBlockTime(v int32) {
	o.BlockTime = &v
}

// GetBytesInBlock returns the BytesInBlock field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetBytesInBlock() int32 {
	if o == nil || IsNil(o.BytesInBlock) {
		var ret int32
		return ret
	}
	return *o.BytesInBlock
}

// GetBytesInBlockOk returns a tuple with the BytesInBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetBytesInBlockOk() (*int32, bool) {
	if o == nil || IsNil(o.BytesInBlock) {
		return nil, false
	}
	return o.BytesInBlock, true
}

// HasBytesInBlock returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasBytesInBlock() bool {
	if o != nil && !IsNil(o.BytesInBlock) {
		return true
	}

	return false
}

// SetBytesInBlock gets a reference to the given int32 and assigns it to the BytesInBlock field.
func (o *ResponsesBlockStats) SetBytesInBlock(v int32) {
	o.BytesInBlock = &v
}

// GetCommissions returns the Commissions field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetCommissions() string {
	if o == nil || IsNil(o.Commissions) {
		var ret string
		return ret
	}
	return *o.Commissions
}

// GetCommissionsOk returns a tuple with the Commissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetCommissionsOk() (*string, bool) {
	if o == nil || IsNil(o.Commissions) {
		return nil, false
	}
	return o.Commissions, true
}

// HasCommissions returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasCommissions() bool {
	if o != nil && !IsNil(o.Commissions) {
		return true
	}

	return false
}

// SetCommissions gets a reference to the given string and assigns it to the Commissions field.
func (o *ResponsesBlockStats) SetCommissions(v string) {
	o.Commissions = &v
}

// GetEventsCount returns the EventsCount field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetEventsCount() int32 {
	if o == nil || IsNil(o.EventsCount) {
		var ret int32
		return ret
	}
	return *o.EventsCount
}

// GetEventsCountOk returns a tuple with the EventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EventsCount) {
		return nil, false
	}
	return o.EventsCount, true
}

// HasEventsCount returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasEventsCount() bool {
	if o != nil && !IsNil(o.EventsCount) {
		return true
	}

	return false
}

// SetEventsCount gets a reference to the given int32 and assigns it to the EventsCount field.
func (o *ResponsesBlockStats) SetEventsCount(v int32) {
	o.EventsCount = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetFee() string {
	if o == nil || IsNil(o.Fee) {
		var ret string
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetFeeOk() (*string, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given string and assigns it to the Fee field.
func (o *ResponsesBlockStats) SetFee(v string) {
	o.Fee = &v
}

// GetFillRate returns the FillRate field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetFillRate() string {
	if o == nil || IsNil(o.FillRate) {
		var ret string
		return ret
	}
	return *o.FillRate
}

// GetFillRateOk returns a tuple with the FillRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetFillRateOk() (*string, bool) {
	if o == nil || IsNil(o.FillRate) {
		return nil, false
	}
	return o.FillRate, true
}

// HasFillRate returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasFillRate() bool {
	if o != nil && !IsNil(o.FillRate) {
		return true
	}

	return false
}

// SetFillRate gets a reference to the given string and assigns it to the FillRate field.
func (o *ResponsesBlockStats) SetFillRate(v string) {
	o.FillRate = &v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetGasLimit() int32 {
	if o == nil || IsNil(o.GasLimit) {
		var ret int32
		return ret
	}
	return *o.GasLimit
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetGasLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.GasLimit) {
		return nil, false
	}
	return o.GasLimit, true
}

// HasGasLimit returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasGasLimit() bool {
	if o != nil && !IsNil(o.GasLimit) {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given int32 and assigns it to the GasLimit field.
func (o *ResponsesBlockStats) SetGasLimit(v int32) {
	o.GasLimit = &v
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetGasUsed() int32 {
	if o == nil || IsNil(o.GasUsed) {
		var ret int32
		return ret
	}
	return *o.GasUsed
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetGasUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.GasUsed) {
		return nil, false
	}
	return o.GasUsed, true
}

// HasGasUsed returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasGasUsed() bool {
	if o != nil && !IsNil(o.GasUsed) {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given int32 and assigns it to the GasUsed field.
func (o *ResponsesBlockStats) SetGasUsed(v int32) {
	o.GasUsed = &v
}

// GetInflationRate returns the InflationRate field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetInflationRate() string {
	if o == nil || IsNil(o.InflationRate) {
		var ret string
		return ret
	}
	return *o.InflationRate
}

// GetInflationRateOk returns a tuple with the InflationRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetInflationRateOk() (*string, bool) {
	if o == nil || IsNil(o.InflationRate) {
		return nil, false
	}
	return o.InflationRate, true
}

// HasInflationRate returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasInflationRate() bool {
	if o != nil && !IsNil(o.InflationRate) {
		return true
	}

	return false
}

// SetInflationRate gets a reference to the given string and assigns it to the InflationRate field.
func (o *ResponsesBlockStats) SetInflationRate(v string) {
	o.InflationRate = &v
}

// GetRewards returns the Rewards field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetRewards() string {
	if o == nil || IsNil(o.Rewards) {
		var ret string
		return ret
	}
	return *o.Rewards
}

// GetRewardsOk returns a tuple with the Rewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetRewardsOk() (*string, bool) {
	if o == nil || IsNil(o.Rewards) {
		return nil, false
	}
	return o.Rewards, true
}

// HasRewards returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasRewards() bool {
	if o != nil && !IsNil(o.Rewards) {
		return true
	}

	return false
}

// SetRewards gets a reference to the given string and assigns it to the Rewards field.
func (o *ResponsesBlockStats) SetRewards(v string) {
	o.Rewards = &v
}

// GetSquareSize returns the SquareSize field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetSquareSize() int32 {
	if o == nil || IsNil(o.SquareSize) {
		var ret int32
		return ret
	}
	return *o.SquareSize
}

// GetSquareSizeOk returns a tuple with the SquareSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetSquareSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.SquareSize) {
		return nil, false
	}
	return o.SquareSize, true
}

// HasSquareSize returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasSquareSize() bool {
	if o != nil && !IsNil(o.SquareSize) {
		return true
	}

	return false
}

// SetSquareSize gets a reference to the given int32 and assigns it to the SquareSize field.
func (o *ResponsesBlockStats) SetSquareSize(v int32) {
	o.SquareSize = &v
}

// GetSupplyChange returns the SupplyChange field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetSupplyChange() string {
	if o == nil || IsNil(o.SupplyChange) {
		var ret string
		return ret
	}
	return *o.SupplyChange
}

// GetSupplyChangeOk returns a tuple with the SupplyChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetSupplyChangeOk() (*string, bool) {
	if o == nil || IsNil(o.SupplyChange) {
		return nil, false
	}
	return o.SupplyChange, true
}

// HasSupplyChange returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasSupplyChange() bool {
	if o != nil && !IsNil(o.SupplyChange) {
		return true
	}

	return false
}

// SetSupplyChange gets a reference to the given string and assigns it to the SupplyChange field.
func (o *ResponsesBlockStats) SetSupplyChange(v string) {
	o.SupplyChange = &v
}

// GetTxCount returns the TxCount field value if set, zero value otherwise.
func (o *ResponsesBlockStats) GetTxCount() int32 {
	if o == nil || IsNil(o.TxCount) {
		var ret int32
		return ret
	}
	return *o.TxCount
}

// GetTxCountOk returns a tuple with the TxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesBlockStats) GetTxCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TxCount) {
		return nil, false
	}
	return o.TxCount, true
}

// HasTxCount returns a boolean if a field has been set.
func (o *ResponsesBlockStats) HasTxCount() bool {
	if o != nil && !IsNil(o.TxCount) {
		return true
	}

	return false
}

// SetTxCount gets a reference to the given int32 and assigns it to the TxCount field.
func (o *ResponsesBlockStats) SetTxCount(v int32) {
	o.TxCount = &v
}

func (o ResponsesBlockStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesBlockStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlobsCount) {
		toSerialize["blobs_count"] = o.BlobsCount
	}
	if !IsNil(o.BlobsSize) {
		toSerialize["blobs_size"] = o.BlobsSize
	}
	if !IsNil(o.BlockTime) {
		toSerialize["block_time"] = o.BlockTime
	}
	if !IsNil(o.BytesInBlock) {
		toSerialize["bytes_in_block"] = o.BytesInBlock
	}
	if !IsNil(o.Commissions) {
		toSerialize["commissions"] = o.Commissions
	}
	if !IsNil(o.EventsCount) {
		toSerialize["events_count"] = o.EventsCount
	}
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	if !IsNil(o.FillRate) {
		toSerialize["fill_rate"] = o.FillRate
	}
	if !IsNil(o.GasLimit) {
		toSerialize["gas_limit"] = o.GasLimit
	}
	if !IsNil(o.GasUsed) {
		toSerialize["gas_used"] = o.GasUsed
	}
	if !IsNil(o.InflationRate) {
		toSerialize["inflation_rate"] = o.InflationRate
	}
	if !IsNil(o.Rewards) {
		toSerialize["rewards"] = o.Rewards
	}
	if !IsNil(o.SquareSize) {
		toSerialize["square_size"] = o.SquareSize
	}
	if !IsNil(o.SupplyChange) {
		toSerialize["supply_change"] = o.SupplyChange
	}
	if !IsNil(o.TxCount) {
		toSerialize["tx_count"] = o.TxCount
	}
	return toSerialize, nil
}

type NullableResponsesBlockStats struct {
	value *ResponsesBlockStats
	isSet bool
}

func (v NullableResponsesBlockStats) Get() *ResponsesBlockStats {
	return v.value
}

func (v *NullableResponsesBlockStats) Set(val *ResponsesBlockStats) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesBlockStats) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesBlockStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesBlockStats(val *ResponsesBlockStats) *NullableResponsesBlockStats {
	return &NullableResponsesBlockStats{value: val, isSet: true}
}

func (v NullableResponsesBlockStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesBlockStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


