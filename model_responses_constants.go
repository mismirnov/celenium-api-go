/*
Celenium API

This is docs of Celenium API.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesConstants type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesConstants{}

// ResponsesConstants struct for ResponsesConstants
type ResponsesConstants struct {
	DenomMetadata []ResponsesDenomMetadata `json:"denom_metadata,omitempty"`
	Module *map[string]map[string]string `json:"module,omitempty"`
}

// NewResponsesConstants instantiates a new ResponsesConstants object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesConstants() *ResponsesConstants {
	this := ResponsesConstants{}
	return &this
}

// NewResponsesConstantsWithDefaults instantiates a new ResponsesConstants object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesConstantsWithDefaults() *ResponsesConstants {
	this := ResponsesConstants{}
	return &this
}

// GetDenomMetadata returns the DenomMetadata field value if set, zero value otherwise.
func (o *ResponsesConstants) GetDenomMetadata() []ResponsesDenomMetadata {
	if o == nil || IsNil(o.DenomMetadata) {
		var ret []ResponsesDenomMetadata
		return ret
	}
	return o.DenomMetadata
}

// GetDenomMetadataOk returns a tuple with the DenomMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesConstants) GetDenomMetadataOk() ([]ResponsesDenomMetadata, bool) {
	if o == nil || IsNil(o.DenomMetadata) {
		return nil, false
	}
	return o.DenomMetadata, true
}

// HasDenomMetadata returns a boolean if a field has been set.
func (o *ResponsesConstants) HasDenomMetadata() bool {
	if o != nil && !IsNil(o.DenomMetadata) {
		return true
	}

	return false
}

// SetDenomMetadata gets a reference to the given []ResponsesDenomMetadata and assigns it to the DenomMetadata field.
func (o *ResponsesConstants) SetDenomMetadata(v []ResponsesDenomMetadata) {
	o.DenomMetadata = v
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *ResponsesConstants) GetModule() map[string]map[string]string {
	if o == nil || IsNil(o.Module) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesConstants) GetModuleOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *ResponsesConstants) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given map[string]map[string]string and assigns it to the Module field.
func (o *ResponsesConstants) SetModule(v map[string]map[string]string) {
	o.Module = &v
}

func (o ResponsesConstants) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesConstants) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DenomMetadata) {
		toSerialize["denom_metadata"] = o.DenomMetadata
	}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	return toSerialize, nil
}

type NullableResponsesConstants struct {
	value *ResponsesConstants
	isSet bool
}

func (v NullableResponsesConstants) Get() *ResponsesConstants {
	return v.value
}

func (v *NullableResponsesConstants) Set(val *ResponsesConstants) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesConstants) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesConstants) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesConstants(val *ResponsesConstants) *NullableResponsesConstants {
	return &NullableResponsesConstants{value: val, isSet: true}
}

func (v NullableResponsesConstants) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesConstants) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


