/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesEnums type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesEnums{}

// ResponsesEnums struct for ResponsesEnums
type ResponsesEnums struct {
	EventType []string `json:"event_type,omitempty"`
	MessageType []string `json:"message_type,omitempty"`
	Status []string `json:"status,omitempty"`
}

// NewResponsesEnums instantiates a new ResponsesEnums object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesEnums() *ResponsesEnums {
	this := ResponsesEnums{}
	return &this
}

// NewResponsesEnumsWithDefaults instantiates a new ResponsesEnums object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesEnumsWithDefaults() *ResponsesEnums {
	this := ResponsesEnums{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ResponsesEnums) GetEventType() []string {
	if o == nil || IsNil(o.EventType) {
		var ret []string
		return ret
	}
	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesEnums) GetEventTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ResponsesEnums) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given []string and assigns it to the EventType field.
func (o *ResponsesEnums) SetEventType(v []string) {
	o.EventType = v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *ResponsesEnums) GetMessageType() []string {
	if o == nil || IsNil(o.MessageType) {
		var ret []string
		return ret
	}
	return o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesEnums) GetMessageTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *ResponsesEnums) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given []string and assigns it to the MessageType field.
func (o *ResponsesEnums) SetMessageType(v []string) {
	o.MessageType = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ResponsesEnums) GetStatus() []string {
	if o == nil || IsNil(o.Status) {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesEnums) GetStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ResponsesEnums) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *ResponsesEnums) SetStatus(v []string) {
	o.Status = v
}

func (o ResponsesEnums) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesEnums) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.MessageType) {
		toSerialize["message_type"] = o.MessageType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableResponsesEnums struct {
	value *ResponsesEnums
	isSet bool
}

func (v NullableResponsesEnums) Get() *ResponsesEnums {
	return v.value
}

func (v *NullableResponsesEnums) Set(val *ResponsesEnums) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesEnums) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesEnums) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesEnums(val *ResponsesEnums) *NullableResponsesEnums {
	return &NullableResponsesEnums{value: val, isSet: true}
}

func (v NullableResponsesEnums) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesEnums) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


