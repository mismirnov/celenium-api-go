/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesJail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesJail{}

// ResponsesJail struct for ResponsesJail
type ResponsesJail struct {
	Burned *string `json:"burned,omitempty"`
	Height *int32 `json:"height,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Time *string `json:"time,omitempty"`
	Validator *ResponsesShortValidator `json:"validator,omitempty"`
}

// NewResponsesJail instantiates a new ResponsesJail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesJail() *ResponsesJail {
	this := ResponsesJail{}
	return &this
}

// NewResponsesJailWithDefaults instantiates a new ResponsesJail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesJailWithDefaults() *ResponsesJail {
	this := ResponsesJail{}
	return &this
}

// GetBurned returns the Burned field value if set, zero value otherwise.
func (o *ResponsesJail) GetBurned() string {
	if o == nil || IsNil(o.Burned) {
		var ret string
		return ret
	}
	return *o.Burned
}

// GetBurnedOk returns a tuple with the Burned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesJail) GetBurnedOk() (*string, bool) {
	if o == nil || IsNil(o.Burned) {
		return nil, false
	}
	return o.Burned, true
}

// HasBurned returns a boolean if a field has been set.
func (o *ResponsesJail) HasBurned() bool {
	if o != nil && !IsNil(o.Burned) {
		return true
	}

	return false
}

// SetBurned gets a reference to the given string and assigns it to the Burned field.
func (o *ResponsesJail) SetBurned(v string) {
	o.Burned = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ResponsesJail) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesJail) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ResponsesJail) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *ResponsesJail) SetHeight(v int32) {
	o.Height = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ResponsesJail) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesJail) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ResponsesJail) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ResponsesJail) SetReason(v string) {
	o.Reason = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ResponsesJail) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesJail) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ResponsesJail) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *ResponsesJail) SetTime(v string) {
	o.Time = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *ResponsesJail) GetValidator() ResponsesShortValidator {
	if o == nil || IsNil(o.Validator) {
		var ret ResponsesShortValidator
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesJail) GetValidatorOk() (*ResponsesShortValidator, bool) {
	if o == nil || IsNil(o.Validator) {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *ResponsesJail) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given ResponsesShortValidator and assigns it to the Validator field.
func (o *ResponsesJail) SetValidator(v ResponsesShortValidator) {
	o.Validator = &v
}

func (o ResponsesJail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesJail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Burned) {
		toSerialize["burned"] = o.Burned
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	return toSerialize, nil
}

type NullableResponsesJail struct {
	value *ResponsesJail
	isSet bool
}

func (v NullableResponsesJail) Get() *ResponsesJail {
	return v.value
}

func (v *NullableResponsesJail) Set(val *ResponsesJail) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesJail) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesJail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesJail(val *ResponsesJail) *NullableResponsesJail {
	return &NullableResponsesJail{value: val, isSet: true}
}

func (v NullableResponsesJail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesJail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


