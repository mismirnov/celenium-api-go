/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesODSItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesODSItem{}

// ResponsesODSItem struct for ResponsesODSItem
type ResponsesODSItem struct {
	From []int32 `json:"from,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	To []int32 `json:"to,omitempty"`
	Type *ResponsesNamespaceKind `json:"type,omitempty"`
}

// NewResponsesODSItem instantiates a new ResponsesODSItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesODSItem() *ResponsesODSItem {
	this := ResponsesODSItem{}
	return &this
}

// NewResponsesODSItemWithDefaults instantiates a new ResponsesODSItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesODSItemWithDefaults() *ResponsesODSItem {
	this := ResponsesODSItem{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *ResponsesODSItem) GetFrom() []int32 {
	if o == nil || IsNil(o.From) {
		var ret []int32
		return ret
	}
	return o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesODSItem) GetFromOk() ([]int32, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *ResponsesODSItem) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given []int32 and assigns it to the From field.
func (o *ResponsesODSItem) SetFrom(v []int32) {
	o.From = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ResponsesODSItem) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesODSItem) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ResponsesODSItem) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ResponsesODSItem) SetNamespace(v string) {
	o.Namespace = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ResponsesODSItem) GetTo() []int32 {
	if o == nil || IsNil(o.To) {
		var ret []int32
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesODSItem) GetToOk() ([]int32, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ResponsesODSItem) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given []int32 and assigns it to the To field.
func (o *ResponsesODSItem) SetTo(v []int32) {
	o.To = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResponsesODSItem) GetType() ResponsesNamespaceKind {
	if o == nil || IsNil(o.Type) {
		var ret ResponsesNamespaceKind
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesODSItem) GetTypeOk() (*ResponsesNamespaceKind, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResponsesODSItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ResponsesNamespaceKind and assigns it to the Type field.
func (o *ResponsesODSItem) SetType(v ResponsesNamespaceKind) {
	o.Type = &v
}

func (o ResponsesODSItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesODSItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableResponsesODSItem struct {
	value *ResponsesODSItem
	isSet bool
}

func (v NullableResponsesODSItem) Get() *ResponsesODSItem {
	return v.value
}

func (v *NullableResponsesODSItem) Set(val *ResponsesODSItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesODSItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesODSItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesODSItem(val *ResponsesODSItem) *NullableResponsesODSItem {
	return &NullableResponsesODSItem{value: val, isSet: true}
}

func (v NullableResponsesODSItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesODSItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


