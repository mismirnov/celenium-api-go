/*
Celenium API

Celenium API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesShortValidator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesShortValidator{}

// ResponsesShortValidator struct for ResponsesShortValidator
type ResponsesShortValidator struct {
	ConsAddress *string `json:"cons_address,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Moniker *string `json:"moniker,omitempty"`
}

// NewResponsesShortValidator instantiates a new ResponsesShortValidator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesShortValidator() *ResponsesShortValidator {
	this := ResponsesShortValidator{}
	return &this
}

// NewResponsesShortValidatorWithDefaults instantiates a new ResponsesShortValidator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesShortValidatorWithDefaults() *ResponsesShortValidator {
	this := ResponsesShortValidator{}
	return &this
}

// GetConsAddress returns the ConsAddress field value if set, zero value otherwise.
func (o *ResponsesShortValidator) GetConsAddress() string {
	if o == nil || IsNil(o.ConsAddress) {
		var ret string
		return ret
	}
	return *o.ConsAddress
}

// GetConsAddressOk returns a tuple with the ConsAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesShortValidator) GetConsAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ConsAddress) {
		return nil, false
	}
	return o.ConsAddress, true
}

// HasConsAddress returns a boolean if a field has been set.
func (o *ResponsesShortValidator) HasConsAddress() bool {
	if o != nil && !IsNil(o.ConsAddress) {
		return true
	}

	return false
}

// SetConsAddress gets a reference to the given string and assigns it to the ConsAddress field.
func (o *ResponsesShortValidator) SetConsAddress(v string) {
	o.ConsAddress = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResponsesShortValidator) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesShortValidator) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResponsesShortValidator) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ResponsesShortValidator) SetId(v int32) {
	o.Id = &v
}

// GetMoniker returns the Moniker field value if set, zero value otherwise.
func (o *ResponsesShortValidator) GetMoniker() string {
	if o == nil || IsNil(o.Moniker) {
		var ret string
		return ret
	}
	return *o.Moniker
}

// GetMonikerOk returns a tuple with the Moniker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesShortValidator) GetMonikerOk() (*string, bool) {
	if o == nil || IsNil(o.Moniker) {
		return nil, false
	}
	return o.Moniker, true
}

// HasMoniker returns a boolean if a field has been set.
func (o *ResponsesShortValidator) HasMoniker() bool {
	if o != nil && !IsNil(o.Moniker) {
		return true
	}

	return false
}

// SetMoniker gets a reference to the given string and assigns it to the Moniker field.
func (o *ResponsesShortValidator) SetMoniker(v string) {
	o.Moniker = &v
}

func (o ResponsesShortValidator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesShortValidator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsAddress) {
		toSerialize["cons_address"] = o.ConsAddress
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Moniker) {
		toSerialize["moniker"] = o.Moniker
	}
	return toSerialize, nil
}

type NullableResponsesShortValidator struct {
	value *ResponsesShortValidator
	isSet bool
}

func (v NullableResponsesShortValidator) Get() *ResponsesShortValidator {
	return v.value
}

func (v *NullableResponsesShortValidator) Set(val *ResponsesShortValidator) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesShortValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesShortValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesShortValidator(val *ResponsesShortValidator) *NullableResponsesShortValidator {
	return &NullableResponsesShortValidator{value: val, isSet: true}
}

func (v NullableResponsesShortValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesShortValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


