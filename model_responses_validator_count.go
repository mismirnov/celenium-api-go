/*
Celenium API

Celenium TEST API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesValidatorCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesValidatorCount{}

// ResponsesValidatorCount struct for ResponsesValidatorCount
type ResponsesValidatorCount struct {
	Active *int32 `json:"active,omitempty"`
	Inactive *int32 `json:"inactive,omitempty"`
	Jailed *int32 `json:"jailed,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewResponsesValidatorCount instantiates a new ResponsesValidatorCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesValidatorCount() *ResponsesValidatorCount {
	this := ResponsesValidatorCount{}
	return &this
}

// NewResponsesValidatorCountWithDefaults instantiates a new ResponsesValidatorCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesValidatorCountWithDefaults() *ResponsesValidatorCount {
	this := ResponsesValidatorCount{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ResponsesValidatorCount) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesValidatorCount) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ResponsesValidatorCount) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *ResponsesValidatorCount) SetActive(v int32) {
	o.Active = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ResponsesValidatorCount) GetInactive() int32 {
	if o == nil || IsNil(o.Inactive) {
		var ret int32
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesValidatorCount) GetInactiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ResponsesValidatorCount) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given int32 and assigns it to the Inactive field.
func (o *ResponsesValidatorCount) SetInactive(v int32) {
	o.Inactive = &v
}

// GetJailed returns the Jailed field value if set, zero value otherwise.
func (o *ResponsesValidatorCount) GetJailed() int32 {
	if o == nil || IsNil(o.Jailed) {
		var ret int32
		return ret
	}
	return *o.Jailed
}

// GetJailedOk returns a tuple with the Jailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesValidatorCount) GetJailedOk() (*int32, bool) {
	if o == nil || IsNil(o.Jailed) {
		return nil, false
	}
	return o.Jailed, true
}

// HasJailed returns a boolean if a field has been set.
func (o *ResponsesValidatorCount) HasJailed() bool {
	if o != nil && !IsNil(o.Jailed) {
		return true
	}

	return false
}

// SetJailed gets a reference to the given int32 and assigns it to the Jailed field.
func (o *ResponsesValidatorCount) SetJailed(v int32) {
	o.Jailed = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ResponsesValidatorCount) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesValidatorCount) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ResponsesValidatorCount) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ResponsesValidatorCount) SetTotal(v int32) {
	o.Total = &v
}

func (o ResponsesValidatorCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesValidatorCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Jailed) {
		toSerialize["jailed"] = o.Jailed
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableResponsesValidatorCount struct {
	value *ResponsesValidatorCount
	isSet bool
}

func (v NullableResponsesValidatorCount) Get() *ResponsesValidatorCount {
	return v.value
}

func (v *NullableResponsesValidatorCount) Set(val *ResponsesValidatorCount) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesValidatorCount) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesValidatorCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesValidatorCount(val *ResponsesValidatorCount) *NullableResponsesValidatorCount {
	return &NullableResponsesValidatorCount{value: val, isSet: true}
}

func (v NullableResponsesValidatorCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesValidatorCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


