/*
Celenium API

Celenium TEST API is a powerful tool to access all blockchain data that is processed and indexed by our proprietary indexer. With Celenium API you can retrieve all historical data, off-chain data, blobs and statistics through our REST API. Celenium API indexer are open source, which allows you to not depend on third-party services. You can clone, build and run them independently, giving you full control over all components. If you have any questions or feature requests, please feel free to contact us. We appreciate your feedback!

API version: 1.0
Contact: celenium@pklabs.me
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package celenium

import (
	"encoding/json"
)

// checks if the ResponsesValidatorUptime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponsesValidatorUptime{}

// ResponsesValidatorUptime struct for ResponsesValidatorUptime
type ResponsesValidatorUptime struct {
	Blocks []ResponsesSignedBlocks `json:"blocks,omitempty"`
	Uptime *string `json:"uptime,omitempty"`
}

// NewResponsesValidatorUptime instantiates a new ResponsesValidatorUptime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponsesValidatorUptime() *ResponsesValidatorUptime {
	this := ResponsesValidatorUptime{}
	return &this
}

// NewResponsesValidatorUptimeWithDefaults instantiates a new ResponsesValidatorUptime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponsesValidatorUptimeWithDefaults() *ResponsesValidatorUptime {
	this := ResponsesValidatorUptime{}
	return &this
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *ResponsesValidatorUptime) GetBlocks() []ResponsesSignedBlocks {
	if o == nil || IsNil(o.Blocks) {
		var ret []ResponsesSignedBlocks
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesValidatorUptime) GetBlocksOk() ([]ResponsesSignedBlocks, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *ResponsesValidatorUptime) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []ResponsesSignedBlocks and assigns it to the Blocks field.
func (o *ResponsesValidatorUptime) SetBlocks(v []ResponsesSignedBlocks) {
	o.Blocks = v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *ResponsesValidatorUptime) GetUptime() string {
	if o == nil || IsNil(o.Uptime) {
		var ret string
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponsesValidatorUptime) GetUptimeOk() (*string, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *ResponsesValidatorUptime) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given string and assigns it to the Uptime field.
func (o *ResponsesValidatorUptime) SetUptime(v string) {
	o.Uptime = &v
}

func (o ResponsesValidatorUptime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponsesValidatorUptime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	return toSerialize, nil
}

type NullableResponsesValidatorUptime struct {
	value *ResponsesValidatorUptime
	isSet bool
}

func (v NullableResponsesValidatorUptime) Get() *ResponsesValidatorUptime {
	return v.value
}

func (v *NullableResponsesValidatorUptime) Set(val *ResponsesValidatorUptime) {
	v.value = val
	v.isSet = true
}

func (v NullableResponsesValidatorUptime) IsSet() bool {
	return v.isSet
}

func (v *NullableResponsesValidatorUptime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponsesValidatorUptime(val *ResponsesValidatorUptime) *NullableResponsesValidatorUptime {
	return &NullableResponsesValidatorUptime{value: val, isSet: true}
}

func (v NullableResponsesValidatorUptime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponsesValidatorUptime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


