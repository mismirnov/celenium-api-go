/*
Celenium API

Testing NamespaceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package celenium

import (
	"context"
	celeniumApi "github.com/mismirnov/celenium-api-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_celenium_NamespaceAPIService(t *testing.T) {

	configuration := celeniumApi.NewConfiguration()
	apiClient := celeniumApi.NewAPIClient(configuration)

	t.Run("Test NamespaceAPIService GetBlob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NamespaceAPI.GetBlob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetBlobLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var version int32

		resp, httpRes, err := apiClient.NamespaceAPI.GetBlobLogs(context.Background(), id, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetBlobMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NamespaceAPI.GetBlobMetadata(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespace(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceActive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceActive(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceBase64", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceBase64(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceBlobs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string
		var height int32

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceBlobs(context.Background(), hash, height).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceByVersionAndId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var version int32

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceByVersionAndId(context.Background(), id, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceMessages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var version int32

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceMessages(context.Background(), id, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService GetNamespaceRollups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var version int32

		resp, httpRes, err := apiClient.NamespaceAPI.GetNamespaceRollups(context.Background(), id, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceAPIService ListNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NamespaceAPI.ListNamespace(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
